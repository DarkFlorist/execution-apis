MultiCallPayload:
  title: Arguments for multi call
  required:
    - blockStateCalls
  properties:
    blockStateCalls:
      title: Block State Calls
      description: Definition of blocks that can contain calls and overrides
      $ref: '#/components/schemas/BlockStateCalls'
    traceTransfers:
      title: Trace ETH Transfers
      description: |-
        Adds ETH transfers as ERC20 transfer events to the logs. These transfers have emitter contract parameter set as address(0x0).
        Default: false.
      type: boolean
    validation:
      title: Validation
      description: |-
        When true, the multicall does all validations that a normal EVM would do, except contract sender and signature checks. When false, multicall behaves like eth_call.
        Default: false.
      type: boolean
BlockStateCalls:
  title: Array of block state calls to be executed at specific, optional block/state.
  description: "The size of this array may be limited depending on the client as a DOS protection. 256 is a common/recommended limit as it is the same limit used by BLOCKHASH opcode."
  type: array
  properties:
    blockOverrides:
      title: Block overrides. When overriding block numbers across multiple blocks, block number not decrease or remain the same between block overrides, but skipping block numbers is acceptable.
      description: |-
        Block overrides can be used to replace fields in a block.
        default: no block override.
      $ref: '#/components/schemas/BlockOverrides'
    stateOverrides:
      title: State overrides
      description: |-
        State overrides can be used to replace existing blockchain state with new state.
        Default: no state overrides
      $ref: '#/components/schemas/StateOverrides'
    calls:
      type: array
      title: calls
      description: |-
        List of transactions to execute at this block/state.
        Default: []
      items:
        $ref: '#/components/schemas/GenericCallTransaction'
StateOverrides:
  title: Dictionary of addresses in the state to be overridden
  type: object
  patternProperties:
    '^0x[a-fA-F0-9]{40}$':
      $ref: '#/components/schemas/AccountOverride'
  additionalProperties: false
AccountOverride:
  title: Details of an account to be overridden
  type: object
  oneOf:
    - $ref: '#/components/schemas/AccountOverrideState'
    - $ref: '#/components/schemas/AccountOverrideStateDiff'
AccountOverrideState:
  title: Account override with whole storage replacement
  description: It is possible to override any kind of address (EOA's, contracts and precompiles)
  required:
    - state
  properties:
    nonce:
      title: Nonce
      $ref: '#/components/schemas/uint64'
    balance:
      title: Balance
      $ref: '#/components/schemas/uint256'
    code:
      title: Code
      $ref: '#/components/schemas/bytes'
    moveToAddress:
      title: MoveToAddress
      description: An Address where the current address contents are moved into (includes nonce, state, balance and code). This move is done before the other overrides take an action.
      $ref: '#/components/schemas/address'
    state:
      title: Storage
      description: Key-value mapping to override all slots in the account storage before executing the call. This functions similar to eth_call's state parameter.
      $ref: '#/components/schemas/AccountStorage'
AccountOverrideStateDiff:
  title: Account override with partial storage modification
  required:
    - stateDiff
  properties:
    nonce:
      title: Nonce
      $ref: '#/components/schemas/uint64'
    balance:
      title: Balance
      $ref: '#/components/schemas/uint256'
    code:
      title: Code
      $ref: '#/components/schemas/bytes'
    moveToAddress:
      title: MoveToAddress
      $ref: '#/components/schemas/address'
      description: An Address where the current address contents are moved into (includes nonce, state, balance and code). This move is done before the other overrides take an action.
    stateDiff:
      title: Storage difference
      description: Key-value mapping to override individual slots in the account storage before executing the call. This functions similar to eth_call's state parameter.
      $ref: '#/components/schemas/AccountStorage'
AccountStorage:
  title: Storage slots for an account
  type: object
  patternProperties:
    '^0x[a-fA-F0-9]{64}$':
      $ref: '#/components/schemas/hash32'
  additionalProperties: false
BlockOverrides:
  title: Context fields related to the block being executed
  type: object
  properties:
    number:
      title: Number
      $ref: '#/components/schemas/uint64'
    prevRandao:
      title: Randomness beacon
      $ref: '#/components/schemas/uint256'
    time:
      title: Time
      $ref: '#/components/schemas/uint64'
    gasLimit:
      title: Gas limit
      $ref: '#/components/schemas/uint64'
    feeRecipient:
      title: feeRecipient
      $ref: '#/components/schemas/address'
    baseFeePerGas:
      title: Base fee per gas
      $ref: '#/components/schemas/uint256'
MultiCallResult:
  title: Full results of multi call
  type: array
  items:
    $ref: '#/components/schemas/MultiCallBlockResult'
MultiCallBlockResult:
  title: Result of multicall block-level, with array of calls
  type: object
  properties:
    number:
      title: Number
      $ref: '#/components/schemas/uint64'
    hash:
      title: block hash
      $ref: '#/components/schemas/hash32'
    timestamp:
      title: Time
      $ref: '#/components/schemas/uint64'
    gasLimit:
      title: Gas limit
      $ref: '#/components/schemas/uint64'
    gasUsed:
      title: Gas used
      $ref: '#/components/schemas/uint64'
    feeRecipient:
      title: feeRecipient
      $ref: '#/components/schemas/address'
    baseFeePerGas:
      title: Base fee
      $ref: '#/components/schemas/uint256'
    calls:
      $ref: '#/components/schemas/CallResults'
    prevRandao:
      title: Randomness beacon
      $ref: '#/components/schemas/uint256'
CallResults:
  title: Results of multi call within block
  type: array
  items:
    oneOf:
      - $ref: '#/components/schemas/CallResultFailure'
      - $ref: '#/components/schemas/CallResultSuccess'
      - $ref: '#/components/schemas/CallResultInvalid'
CallResultFailure:
  title: Result of call failure
  description: The error messages are suggestions, and clients might implement different error messages. However, the error codes are enforced by the spec.
  type: object
  required:
    - status
    - returnData
    - gasUsed
    - error
  properties:
    status:
      title: Call Status Failure
      type: string
      pattern: ^0x0$
    returnData:
      title: Return data
      $ref: '#/components/schemas/bytes'
    gasUsed:
      title: Return gasUsed
      $ref: '#/components/schemas/uint64'
    error:
      oneOf:
        - code: -32000
          message: 'Execution reverted'
        - code: -32015
          message: 'VM execution error'
CallResultSuccess:
  title: Result of call success
  type: object
  required:
    - status
    - returnData
    - gasUsed
    - logs
  properties:
    status:
      title: Call Status Success
      type: string
      pattern: ^0x1$
    returnData:
      title: Return data
      $ref: '#/components/schemas/bytes'
    gasUsed:
      title: Return gasUsed
      $ref: '#/components/schemas/uint64'
    logs:
      title: Return logs
      type: array
      items:
        $ref: '#/components/schemas/CallResultLog'
CallResultInvalid:
  title: Result of call not being valid (nonce, baseFee, etc)
  description: The error messages are suggestions, and clients might implement different error messages. However, the error codes are enforced by the spec.
  type: object
  required:
    - status
    - error
  properties:
    status:
      title: Call Status Invalid
      type: string
      pattern: ^0x2$
    error:
      oneOf:
        - code: -32000
          message: Missing or invalid parameters
        - code: -32005
          message: Limit exceeded
        - code: -32015
          messagE: Execution error
        - code: -32016
          message: Timeout
        - code: -32602
          message: Invalid params
        - code: -32603
          message: The Ethereum node encountered an internal error
        - code: -38010
          message: Transactions nonce is too low
        - code: -38011
          message: Transactions nonce is too high
        - code: -38012
          message: Transactions baseFee is too low
        - code: -38013
          message: Not enough gas provided to pay for intrinsic gas for a transaction
        - code: -38014
          message: Insufficient funds to pay for gas fees and value fo a transaction
        - code: -38015
          message: Block gas limit exceeded by the block's transactions
        - code: -38020
          message: Block number in sequence did not increase
        - code: -38021
          message: Block timestamp in sequence did not increase
        - code: -38022
          message: MoveToAddress referenced itself in replacement
        - code: -38023
          message: Multiple MoveToAddress referencing the same address to replace
CallResultLog:
  title: log
  type: object
  required:
    - logIndex
    - blockhash
    - blockNumber
    - address
    - data
    - topics
  properties:
    logIndex:
      title: log index
      $ref: '#/components/schemas/uint256'
    blockHash:
      title: block hash
      $ref: '#/components/schemas/hash32'
    blockNumber:
      title: block number
      $ref: '#/components/schemas/uint64'
    address:
      title: address
      description: When trace transfers is enabled, this field is address(0x0) for ETH transfers.
      $ref: '#/components/schemas/address'
    data:
      title: data
      $ref: '#/components/schemas/bytes'
    topics:
      title: topics
      type: array
      items:
        $ref: '#/components/schemas/bytes32'
GenericCallTransaction:
  type: object
  title: Transaction object type for call
  properties:
    type:
      title: type
      $ref: '#/components/schemas/byte'
    nonce:
      title: nonce
      $ref: '#/components/schemas/uint64'
    to:
      title: to address
      $ref: '#/components/schemas/address'
    from:
      title: from address
      $ref: '#/components/schemas/address'
    gas:
      title: gas limit
      $ref: '#/components/schemas/uint64'
    value:
      title: value
      $ref: '#/components/schemas/uint256'
    input:
      title: input data
      $ref: '#/components/schemas/bytes'
    gasPrice:
      title: gas price
      description: The gas price willing to be paid by the sender in wei
      $ref: '#/components/schemas/uint256'
    maxPriorityFeePerGas:
      title: max priority fee per gas
      description: Maximum fee per gas the sender is willing to pay to miners in wei
      $ref: '#/components/schemas/uint256'
    maxFeePerGas:
      title: max fee per gas
      description: The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei
      $ref: '#/components/schemas/uint256'
    accessList:
      title: accessList
      description: EIP-2930 access list
      $ref: '#/components/schemas/AccessList'
